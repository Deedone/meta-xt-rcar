From c1dbf6ac68421716b1420cab5ea1f763b488405f Mon Sep 17 00:00:00 2001
Message-Id: <c1dbf6ac68421716b1420cab5ea1f763b488405f.1728389216.git.mykyta_poturai@epam.com>
In-Reply-To: <bc35a1559ba18018db00e017ef9359f091274151.1728389216.git.mykyta_poturai@epam.com>
References: <bc35a1559ba18018db00e017ef9359f091274151.1728389216.git.mykyta_poturai@epam.com>
From: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
Date: Wed, 24 Feb 2021 02:51:38 +0200
Subject: [PATCH 04/22] Implement Guest FW map/unmap and VM online/offline

Signed-off-by: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
Signed-off-by: Oleksandr Tyshchenko <oleksandr_tyshchenko@epam.com>
---
 .../system/rogue/common/env/xen/xen_back.c    | 48 +++++++++++++++++--
 .../system/rogue/common/env/xen/xen_back.h    |  3 --
 .../system/rogue/common/env/xen/xen_front.c   | 45 +++++++++++++++++
 .../system/rogue/common/env/xen/xen_front.h   |  4 ++
 services/system/rogue/common/vmm_type_xen.c   |  8 +---
 5 files changed, 96 insertions(+), 12 deletions(-)

diff --git a/services/system/rogue/common/env/xen/xen_back.c b/services/system/rogue/common/env/xen/xen_back.c
index 5518204..045c9fd 100644
--- a/services/system/rogue/common/env/xen/xen_back.c
+++ b/services/system/rogue/common/env/xen/xen_back.c
@@ -20,6 +20,8 @@
 #include <xen/xenbus.h>
 
 #include "vmm_impl.h"
+#include "pvrsrv.h"
+#include "vmm_pvz_server.h"
 
 #include "pvzif.h"
 #include "xen_back.h"
@@ -105,7 +107,7 @@ static void xdrv_do_op(struct work_struct *data)
 		container_of(data, struct xdrv_info, op_work);
 	struct xdrv_evtchnl_info *evt_chnl = &drv_info->evt_chnl;
 	struct xengsx_resp *resp;
-	int more_to_do;
+	int more_to_do, ret;
 
 	do {
 		struct xengsx_req req;
@@ -128,11 +130,37 @@ static void xdrv_do_op(struct work_struct *data)
 
 			switch (req.operation) {
 			case XENGSX_OP_MAP_DEV_HEAP:
-				/* fallthrough */
+				ret = xen_back_pvz_connection->sServerFuncTab.pfnMapDevPhysHeap(
+					drv_info->osid, req.func_id, req.dev_id,
+					req.op.map_dev_heap.buffer_sz,
+					req.op.map_dev_heap.ipa);
+				if (ret == PVRSRV_OK)
+					drv_info->dev_id = req.dev_id;
+				XEN_DEBUG("Mapping Guest FW with OSID %d IPA 0x%llx sz %llu, ret %d",
+					drv_info->osid, req.op.map_dev_heap.ipa,
+					req.op.map_dev_heap.buffer_sz, ret);
+				resp = be_prepare_resp(drv_info, req.operation,
+					req.id);
+				resp->status = ret;
+				xdrv_evtchnl_flush(evt_chnl);
+				break;
 			case XENGSX_OP_UNMAP_DEV_HEAP:
+				if (drv_info->dev_id != req.dev_id) {
+					ret = -EINVAL;
+					XEN_ERROR("Wrong device ID while unmapping: provided %d expected %d, OSID %d domain ID %d",
+						req.dev_id, drv_info->dev_id,
+						drv_info->osid,
+						vgpu_img_get_domid(drv_info->osid));
+				} else {
+					ret = xen_back_pvz_connection->sServerFuncTab.pfnUnmapDevPhysHeap(
+						drv_info->osid, req.func_id, req.dev_id);
+					drv_info->dev_id = VGSX_BAD_DEVICE_ID;
+					XEN_DEBUG("Unmapping Guest FW with OSID %d, ret %d",
+						drv_info->osid, ret);
+				}
 				resp = be_prepare_resp(drv_info, req.operation,
 					req.id);
-				resp->status = 0;
+				resp->status = ret;
 				xdrv_evtchnl_flush(evt_chnl);
 				break;
 			default:
@@ -243,6 +271,18 @@ static inline void xdrv_fe_on_disconnected(struct xdrv_info *drv_info)
 		xenbus_unmap_ring_vfree(drv_info->xb_dev, evt_chnl->sring);
 	evt_chnl->sring = NULL;
 
+	/* unmap guest's FW heap if any */
+	if (drv_info->dev_id != VGSX_BAD_DEVICE_ID)
+		xen_back_pvz_connection->sServerFuncTab.pfnUnmapDevPhysHeap(
+			drv_info->osid, PVZ_BRIDGE_UNMAPDEVICEPHYSHEAP,
+			drv_info->dev_id);
+	drv_info->dev_id = VGSX_BAD_DEVICE_ID;
+
+	if (drv_info->osid) {
+		xen_back_pvz_connection->sVmmFuncTab.pfnOnVmOffline(
+			drv_info->osid);
+		vgpu_img_reset_domid(drv_info->osid, 0);
+	}
 	drv_info->osid = 0;
 }
 
@@ -301,6 +341,8 @@ static void xdrv_fe_on_changed(struct xenbus_device *xb_dev,
 		break;
 
 	case XenbusStateConnected:
+		xen_back_pvz_connection->sVmmFuncTab.pfnOnVmOnline(
+			drv_info->osid);
 		break;
 	}
 }
diff --git a/services/system/rogue/common/env/xen/xen_back.h b/services/system/rogue/common/env/xen/xen_back.h
index ec8b2b2..87ecc31 100644
--- a/services/system/rogue/common/env/xen/xen_back.h
+++ b/services/system/rogue/common/env/xen/xen_back.h
@@ -1,9 +1,6 @@
 #ifndef __XEN_BACK_H__
 #define __XEN_BACK_H__
 
-#include "pvrsrv.h"
-#include "vmm_impl.h"
-
 #include <xen/interface/xen.h>
 
 #define VGSX_BAD_DOMAIN_ID	-1
diff --git a/services/system/rogue/common/env/xen/xen_front.c b/services/system/rogue/common/env/xen/xen_front.c
index 35e9322..cc1901e 100644
--- a/services/system/rogue/common/env/xen/xen_front.c
+++ b/services/system/rogue/common/env/xen/xen_front.c
@@ -459,3 +459,48 @@ void gsx_front_cleanup(void)
 	 */
 	xenbus_unregister_driver(&xen_driver);
 }
+
+int gsx_front_map(uint32_t func_id, uint32_t dev_id,
+	uint64_t size, uint64_t addr)
+{
+	struct xdrv_info *drv_info = xdrv_get_drv_info();
+	struct xengsx_req *req;
+	unsigned long flags;
+	int ret;
+
+	spin_lock_irqsave(&drv_info->io_lock, flags);
+	req = be_prepare_req(drv_info, XENGSX_OP_MAP_DEV_HEAP);
+	req->func_id = func_id;
+	req->dev_id = dev_id;
+	req->op.map_dev_heap.ipa = addr;
+	req->op.map_dev_heap.buffer_sz = size;
+
+	ret = be_do_io(&drv_info->evt_chnl);
+	spin_unlock_irqrestore(&drv_info->io_lock, flags);
+
+	if (ret < 0)
+		return ret;
+
+	return be_wait_io(&drv_info->evt_chnl);
+}
+
+int gsx_front_unmap(uint32_t func_id, uint32_t dev_id)
+{
+	struct xdrv_info *drv_info = xdrv_get_drv_info();
+	struct xengsx_req *req;
+	unsigned long flags;
+	int ret;
+
+	spin_lock_irqsave(&drv_info->io_lock, flags);
+	req = be_prepare_req(drv_info, XENGSX_OP_UNMAP_DEV_HEAP);
+	req->func_id = func_id;
+	req->dev_id = dev_id;
+
+	ret = be_do_io(&drv_info->evt_chnl);
+	spin_unlock_irqrestore(&drv_info->io_lock, flags);
+
+	if (ret < 0)
+		return ret;
+
+	return be_wait_io(&drv_info->evt_chnl);
+}
diff --git a/services/system/rogue/common/env/xen/xen_front.h b/services/system/rogue/common/env/xen/xen_front.h
index 83b8050..6fb3d2e 100644
--- a/services/system/rogue/common/env/xen/xen_front.h
+++ b/services/system/rogue/common/env/xen/xen_front.h
@@ -4,4 +4,8 @@
 int gsx_front_init(void);
 void gsx_front_cleanup(void);
 
+int gsx_front_map(uint32_t func_id, uint32_t dev_id,
+	uint64_t size, uint64_t addr);
+int gsx_front_unmap(uint32_t func_id, uint32_t dev_id);
+
 #endif /* __XEN_FRONT_H__ */
diff --git a/services/system/rogue/common/vmm_type_xen.c b/services/system/rogue/common/vmm_type_xen.c
index cd59c79..9c5d723 100644
--- a/services/system/rogue/common/vmm_type_xen.c
+++ b/services/system/rogue/common/vmm_type_xen.c
@@ -81,11 +81,7 @@ static PVRSRV_ERROR
 XenVmmMapDevPhysHeap(IMG_UINT32 ui32FuncID, IMG_UINT32 ui32DevID,
 	IMG_UINT64 ui64Size, IMG_UINT64 ui64Addr)
 {
-	PVR_UNREFERENCED_PARAMETER(ui32FuncID);
-	PVR_UNREFERENCED_PARAMETER(ui32DevID);
-	PVR_UNREFERENCED_PARAMETER(ui64Size);
-	PVR_UNREFERENCED_PARAMETER(ui64Addr);
-	return PVRSRV_OK;
+	return gsx_front_map(ui32FuncID, ui32DevID, ui64Size, ui64Addr);
 }
 
 static PVRSRV_ERROR
@@ -93,7 +89,7 @@ XenVmmUnmapDevPhysHeap(IMG_UINT32 ui32FuncID, IMG_UINT32 ui32DevID)
 {
 	PVR_UNREFERENCED_PARAMETER(ui32FuncID);
 	PVR_UNREFERENCED_PARAMETER(ui32DevID);
-	return PVRSRV_OK;
+	return gsx_front_unmap(ui32FuncID, ui32DevID);
 }
 
 /*
-- 
2.34.1

