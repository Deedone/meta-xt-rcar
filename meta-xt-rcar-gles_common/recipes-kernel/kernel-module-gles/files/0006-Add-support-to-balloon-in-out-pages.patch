From dcae1860725cd10560f0f6011649120fefcae710 Mon Sep 17 00:00:00 2001
Message-Id: <dcae1860725cd10560f0f6011649120fefcae710.1728389216.git.mykyta_poturai@epam.com>
In-Reply-To: <bc35a1559ba18018db00e017ef9359f091274151.1728389216.git.mykyta_poturai@epam.com>
References: <bc35a1559ba18018db00e017ef9359f091274151.1728389216.git.mykyta_poturai@epam.com>
From: Oleksandr Tyshchenko <oleksandr_tyshchenko@epam.com>
Date: Mon, 26 Feb 2018 20:31:00 +0200
Subject: [PATCH 06/22] Add support to balloon in/out pages

The ported from Xen PVDRM support will be used by Grant Tables
based mechanism for mapping Guest FW heap on the backend side.

Signed-off-by: Oleksandr Tyshchenko <oleksandr_tyshchenko@epam.com>
---
 .../rogue/common/env/xen/xen_pvz_balloon.c    | 136 ++++++++++++++++++
 .../rogue/common/env/xen/xen_pvz_balloon.h    |  37 +++++
 2 files changed, 173 insertions(+)
 create mode 100644 services/system/rogue/common/env/xen/xen_pvz_balloon.c
 create mode 100644 services/system/rogue/common/env/xen/xen_pvz_balloon.h

diff --git a/services/system/rogue/common/env/xen/xen_pvz_balloon.c b/services/system/rogue/common/env/xen/xen_pvz_balloon.c
new file mode 100644
index 0000000..33fc9b8
--- /dev/null
+++ b/services/system/rogue/common/env/xen/xen_pvz_balloon.c
@@ -0,0 +1,136 @@
+/*
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ * Based on xen_drm_ballon.c (Xen para-virtual DRM device)
+ *
+ * Copyright (C) 2016-2018 EPAM Systems Inc.
+ *
+ * Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
+ */
+
+#include <xen/xenbus.h>
+
+#include <asm/xen/hypercall.h>
+#include <xen/interface/memory.h>
+#include <xen/page.h>
+
+#include "xen_debug.h"
+#include "xen_pvz_balloon.h"
+
+int xen_pvz_ballooned_pages_alloc(struct device *dev,
+		struct xen_pvz_balloon *obj, int num_pages, struct page **pages)
+{
+	xen_pfn_t *frame_list;
+	size_t size;
+	int i, ret;
+	dma_addr_t dev_addr, cpu_addr;
+	void *vaddr = NULL;
+	struct xen_memory_reservation reservation = {
+		.address_bits = 0,
+		.extent_order = 0,
+		.domid        = DOMID_SELF
+	};
+
+	size = num_pages * PAGE_SIZE;
+	XEN_DEBUG("Ballooning out %d pages, size %zu\n", num_pages, size);
+	frame_list = kcalloc(num_pages, sizeof(*frame_list), GFP_KERNEL);
+	if (!frame_list)
+		return -ENOMEM;
+
+	vaddr = dma_alloc_wc(dev, size, &dev_addr, GFP_KERNEL | __GFP_NOWARN);
+	if (!vaddr) {
+		XEN_ERROR("Failed to allocate DMA buffer with size %zu\n",
+				size);
+		ret = -ENOMEM;
+		goto fail;
+	}
+
+	cpu_addr = dev_addr;
+	for (i = 0; i < num_pages; i++) {
+		pages[i] = pfn_to_page(__phys_to_pfn(cpu_addr));
+		/*
+		 * XENMEM_populate_physmap requires a PFN based on Xen
+		 * granularity.
+		 */
+		frame_list[i] = page_to_xen_pfn(pages[i]);
+		cpu_addr += PAGE_SIZE;
+	}
+	set_xen_guest_handle(reservation.extent_start, frame_list);
+	reservation.nr_extents = num_pages;
+	/* rc will hold number of pages processed */
+	ret = HYPERVISOR_memory_op(XENMEM_decrease_reservation, &reservation);
+	if (ret <= 0) {
+		XEN_ERROR("Failed to balloon out %d pages (%d), retrying\n",
+				num_pages, ret);
+		WARN_ON(ret != num_pages);
+		ret = -EFAULT;
+		goto fail;
+	}
+
+	obj->vaddr = vaddr;
+	obj->dev_bus_addr = dev_addr;
+	kfree(frame_list);
+
+	return 0;
+
+fail:
+	if (vaddr)
+		dma_free_wc(dev, size, vaddr, dev_addr);
+	kfree(frame_list);
+	return ret;
+}
+
+void xen_pvz_ballooned_pages_free(struct device *dev,
+		struct xen_pvz_balloon *obj, int num_pages, struct page **pages)
+{
+	xen_pfn_t *frame_list;
+	int i, ret;
+	size_t size;
+	struct xen_memory_reservation reservation = {
+		.address_bits = 0,
+		.extent_order = 0,
+		.domid        = DOMID_SELF
+	};
+
+	if (!pages || !obj->vaddr)
+		return;
+
+	frame_list = kcalloc(num_pages, sizeof(*frame_list), GFP_KERNEL);
+	if (!frame_list) {
+		XEN_ERROR("Failed to balloon in %d pages\n", num_pages);
+		return;
+	}
+
+	XEN_DEBUG("Ballooning in %d pages\n", num_pages);
+	size = num_pages * PAGE_SIZE;
+	for (i = 0; i < num_pages; i++) {
+		/*
+		 * XENMEM_populate_physmap requires a PFN based on Xen
+		 * granularity.
+		 */
+		frame_list[i] = page_to_xen_pfn(pages[i]);
+	}
+	set_xen_guest_handle(reservation.extent_start, frame_list);
+	reservation.nr_extents = num_pages;
+	/* rc will hold number of pages processed */
+	ret = HYPERVISOR_memory_op(XENMEM_populate_physmap, &reservation);
+	if (ret <= 0) {
+		XEN_ERROR("Failed to balloon in %d pages\n", num_pages);
+		WARN_ON(ret != num_pages);
+	}
+
+	if (obj->vaddr)
+		dma_free_wc(dev, size, obj->vaddr, obj->dev_bus_addr);
+
+	obj->vaddr = NULL;
+	obj->dev_bus_addr = 0;
+	kfree(frame_list);
+}
diff --git a/services/system/rogue/common/env/xen/xen_pvz_balloon.h b/services/system/rogue/common/env/xen/xen_pvz_balloon.h
new file mode 100644
index 0000000..aeb9e79
--- /dev/null
+++ b/services/system/rogue/common/env/xen/xen_pvz_balloon.h
@@ -0,0 +1,37 @@
+/*
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ * Based on xen_drm_balloon.h (Xen para-virtual DRM device)
+ *
+ * Copyright (C) 2016-2018 EPAM Systems Inc.
+ *
+ * Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
+ */
+
+#ifndef __XEN_PVZ_BALLOON_H_
+#define __XEN_PVZ_BALLOON_H_
+
+#include <linux/types.h>
+
+struct xen_pvz_balloon {
+	void *vaddr;
+	dma_addr_t dev_bus_addr;
+};
+
+int xen_pvz_ballooned_pages_alloc(struct device *dev,
+		struct xen_pvz_balloon *obj, int num_pages,
+		struct page **pages);
+
+void xen_pvz_ballooned_pages_free(struct device *dev,
+		struct xen_pvz_balloon *obj, int num_pages,
+		struct page **pages);
+
+#endif /* __XEN_PVZ_BALLOON_H_ */
-- 
2.34.1

